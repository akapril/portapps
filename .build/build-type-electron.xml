<?xml version="1.0" encoding="UTF-8"?>
<project name="papps-type-electron" basedir=".">

  <!-- Check required properties -->
  <fail unless="atf.id" message="Property 'atf.id' must be defined before loading ${ant.file.papps-type-electron}"/>

  <dirname property="build.basedir" file="${ant.file.papps-type-electron}"/>
  <property name="root.basedir" location="${build.basedir}/.."/>

  <!-- Import common build.xml and load properties -->
  <import file="${build.basedir}\build-common.xml"/>
  <property file="${build.basedir}\build-type-electron.properties"/>

  <!-- Properties -->
  <property name="nupkg.path" value="${tmp.path}\nupkg"/>
  <property name="extract.path" value="${tmp.path}\extract"/>

  <!-- Targets -->
  <target name="init" depends="papps-common.init">
    <delete dir="${nupkg.path}"/>
    <mkdir dir="${nupkg.path}"/>
    <delete dir="${extract.path}"/>
    <mkdir dir="${extract.path}"/>
  </target>

  <target name="release.arch" depends="start, init, clear, download, extract, nupkg, asar, filterset, build">
    <echo message="Copying files..."/>

    <!-- atf.executionstub -->
    <if>
      <available file="${nupkg.path}\${electron.libfolder}\${electron.executionstub}" type="file"/>
      <then>
        <copy file="${nupkg.path}\${electron.libfolder}\${electron.executionstub}" tofile="${build.path}\${papp.folder}\${atf.id}.exe" overwrite="true"/>
        <copy todir="${build.path}\${papp.folder}\app-${app.version}">
          <fileset dir="${atf.libpath}" defaultexcludes="no" excludes="${electron.executionstub}"/>
        </copy>
      </then>
      <else>
        <copy todir="${build.path}\${papp.folder}\app-${app.version}">
          <fileset dir="${atf.libpath}" defaultexcludes="no"/>
        </copy>
      </else>
    </if>

    <!-- Move Squirrel Update.exe -->
    <if>
      <and>
        <istrue value="${electron.enableautoupdate}"/>
        <available file="${extract.path}\Update.exe" type="file"/>
      </and>
      <then>
        <copy todir="${build.path}\${papp.folder}" file="${extract.path}\Update.exe"/>
        <rcedit arch="${atf.arch}" dir="${build.path}\${papp.folder}">
          <args>
            <arg value="Update.exe"/>
            <arg value="--set-icon"/>
            <arg value="${res.path}\app.ico"/>
          </args>
        </rcedit>
      </then>
    </if>

    <!-- Init nupkg package infos / updates folder -->
    <mkdir dir="${build.path}\${papp.folder}\packages"/>
    <copy file="${extract.path}\RELEASES" todir="${build.path}\${papp.folder}\packages" failonerror="false"/>

    <!-- Add portapp README / CHANGELOG -->
<!--    <copy file="${app.basedir}\README.md" todir="${build.path}" overwrite="true"/>-->
<!--    <copy file="${app.basedir}\CHANGELOG.md" todir="${build.path}" overwrite="true"/>-->

    <!-- Copy portable executable and app ico -->
    <copy file="${tmp.path}\${papp.id}.exe" todir="${build.path}" overwrite="true"/>
    <copy file="${res.path}\app.ico" todir="${build.path}\${papp.folder}" overwrite="true"/>

    <!-- version.dat for CI -->
    <echo message="Writing version.dat..."/>
    <echo file="${tmp.path}\version.dat" append="false">${app.version}-${app.release}</echo>

    <!-- Init release files -->
    <echo message="Creating release files"/>
    <if>
      <not><equals arg1="${atf.win3264.url}" arg2=""/></not>
      <then>
        <copy todir="${release.path}" overwrite="true">
          <fileset dir="${tmp.path}" defaultexcludes="no">
            <include name="${papp.id}*exe"/>
          </fileset>
        </copy>
      </then>
      <else>
        <copy file="${tmp.path}\${papp.id}.exe" tofile="${release.path}\${papp.id}-${atf.arch}.exe" overwrite="true"/>
      </else>
    </if>
    <if>
      <istrue value="${papp.out.original}"/>
      <then>
        <if>
          <equals arg1="${debug}" arg2="false"/>
          <then>
            <move file="${atf.original}" tofile="${release.path}\${atf.filename}${atf.ext}" overwrite="true"/>
          </then>
          <else>
            <copy file="${atf.original}" tofile="${release.path}\${atf.filename}${atf.ext}" overwrite="true"/>
          </else>
        </if>
      </then>
    </if>

    <antcall target="prepare"/>
    <antcall target="packaging"/>
    <antcall target="finalize"/>

    <!-- checksum -->
    <hashfolder folder="${release.path}"/>
  </target>

  <target name="download">
    <echo message="Downloading ${atf.id}..."/>
    <property name="atf.original" location="${tmp.path}\${atf.filename}${atf.ext}"/>
    <get dest="${atf.original}" src="${atf.url}" skipexisting="false" verbose="on"/>
  </target>

  <target name="extract">
    <echo message="Extracting ${atf.original}..."/>
    <sevenzip-ax src="${atf.original}" dest="${extract.path}"/>
    <assertfile file="${extract.path}\${atf.assertextract}"/>
  </target>

  <target name="nupkg">
    <first id="first.nupkg">
      <fileset dir="${extract.path}" defaultexcludes="no" includes="*.nupkg"/>
    </first>
    <condition property="atf.nupkg" value="${toString:first.nupkg}">
      <available file="${toString:first.nupkg}" type="file"/>
    </condition>
    <fail unless="atf.nupkg" message="Nupkg file not found"/>
    <echo message="Nupkg found : ${atf.nupkg}"/>

    <sevenzip-ax src="${atf.nupkg}" dest="${nupkg.path}"/>
    <condition property="atf.libpath" value="${nupkg.path}\${electron.libfolder}">
      <available file="${nupkg.path}\${electron.libfolder}\${atf.id}.exe" type="file"/>
    </condition>
    <fail unless="atf.libpath" message="Artefact lib path not found"/>

    <echo message="Metadata found:"/>
    <xmlproperty file="${nupkg.path}/${atf.id}.nuspec" collapseAttributes="true"/>
    <echo message="* ID      : ${package.metadata.id}"/>
    <echo message="* Title   : ${package.metadata.title}"/>
    <echo message="* Version : ${package.metadata.version}"/>
    <if>
      <equals arg1="${app.version}" arg2=""/>
      <then>
        <var name="app.version" value="${package.metadata.version}"/>
      </then>
    </if>
  </target>

  <target name="asar" depends="load.lib.asar">
    <if>
      <and>
        <not><equals arg1="${electron.userdata.search}" arg2=""/></not>
        <not><equals arg1="${electron.userdata.replace}" arg2=""/></not>
      </and>
      <then>
        <setelectronuserdata path="${nupkg.path}\${electron.libfolder}"
          file="${electron.userdata.file}"
          search="${electron.userdata.search}"
          replace="${electron.userdata.replace}"
        />
      </then>
    </if>
    <if>
      <istrue value="${electron.extract.appasar}"/>
      <then>
        <echo message="Extracting app.asar..."/>
        <exec executable="asar.cmd" failonerror="true" dir="${nupkg.path}\${electron.libfolder}\resources">
          <arg value="extract"/>
          <arg value="app.asar"/>
          <arg value="app"/>
        </exec>
        <delete file="${nupkg.path}\${electron.libfolder}\resources\app.asar"/>
      </then>
    </if>
  </target>

</project>
